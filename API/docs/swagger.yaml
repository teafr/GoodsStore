openapi: 3.0.0
info:
  title: Shop API
  version: 1.0.0
  description: API documentation for Products and Sales
servers:
  - url: http://localhost:5000
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Products
    description: Manage products
  - name: Sales
    description: Manage sales

paths:
  /auth:
    get:
      summary: Get current user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

    put:
      summary: Update user
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '404':
          description: User not found

  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - patronymic
                - email
                - phone
                - address
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                patronymic:
                  type: string
                  example: Ivanovych
                email:
                  type: string
                  example: test@example.com
                phone:
                  type: string
                  example: "0970287656"
                address:
                  type: string
                  example: Kyiv, Ukraine
                isLoyal:
                  type: boolean
                  example: false
                password:
                  type: string
                  example: secret123
      responses:
        '201':
          description: User registered, access token returned
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Registration failed

  /auth/login:
    post:
      summary: Log in user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: secret123
      responses:
        '200':
          description: Login successful, access token returned
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      responses:
        '200':
          description: Logged out successfully
        '400':
          description: Logout failed

  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      responses:
        '200':
          description: New access token returned
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Refresh token missing or invalid

  /auth/mark/{id}:
    put:
      summary: Mark user as loyal
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User marked as loyal
        '404':
          description: User not found
        '400':
          description: Bad request
  /products:
    get:
      summary: Get filtered products
      tags: [Products]
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created

  /products/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
        '404':
          description: Product not found
    delete:
      summary: Delete product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found

  /sales:
    get:
      summary: Get all sales
      tags: [Sales]
      responses:
        '200':
          description: List of sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
    post:
      summary: Create a sale
      tags: [Sales]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Sale created

  /sales/many:
    post:
      summary: Create multiple sales
      tags: [Sales]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Sale'
      responses:
        '201':
          description: Sales created

  /sales/{id}:
    get:
      summary: Get sale by ID
      tags: [Sales]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sale found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '404':
          description: Sale not found
    put:
      summary: Update sale by ID
      tags: [Sales]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
      responses:
        '200':
          description: Sale updated
        '404':
          description: Sale not found
    delete:
      summary: Delete sale by ID
      tags: [Sales]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Sale deleted
        '404':
          description: Sale not found

  /sales/user/{id}:
    get:
      summary: Get sales by user ID
      tags: [Sales]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sales found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required: [name, price, unit, imageUrl]
      properties:
        id:
          type: string
          description: Product ID
        name:
          type: string
        price:
          type: number
        unit:
          type: string
        imageUrl:
          type: string

    User:
      type: object
      required: [email, firstName, lastName, phone, address, hashPassword]
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isLoyal:
          type: boolean
        patronymic:
          type: string
        phone:
          type: string
        address:
          type: string
        hashPassword:
          type: string

    Sale:
      type: object
      required: [product, user, purchaseDate, quantity]
      properties:
        id:
          type: string
        product:
          type: string
          description: Product ID
        user:
          type: string
          description: User ID
        purchaseDate:
          type: string
          format: date-time
        deliveryDate:
          type: string
          format: date-time
        quantity:
          type: integer
        discount:
          type: number
          minimum: 0
          maximum: 1